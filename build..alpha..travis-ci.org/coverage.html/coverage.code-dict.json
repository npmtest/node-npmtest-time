{"/home/travis/build/npmtest/node-npmtest-time/test.js":"/* istanbul instrument in package npmtest_time */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-time/lib.npmtest_time.js":"/* istanbul instrument in package npmtest_time */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_time = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_time = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-time/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-time && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_time */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_time\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_time.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_time.rollup.js'] =\n            local.assetsDict['/assets.npmtest_time.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_time.__dirname + '/lib.npmtest_time.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-time/node_modules/time/index.js":"/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('time')\n  , fs = require('fs')\n  , path = require('path')\n  , bindings = require('bindings')('time.node')\n  , MILLIS_PER_SECOND = 1000\n  , DAYS_OF_WEEK = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\n  , MONTHS = ['January','February','March','April','May','June','July','August','September','October','November','December']\n  , TZ_BLACKLIST = [ 'SystemV', 'Etc' ];\n\n/**\n * Extends a \"Date\" constructor with node-time's extensions.\n * By default, `time.Date` is extended with this function.\n * If you want the global your your module-specific Date to be extended,\n * then invoke this function on the Date constructor.\n */\n\nexports = module.exports = function (Date) {\n  debug('extending Date constructor');\n  var p = Date.prototype;\n  p.getTimezone = getTimezone;\n  p.setTimezone = setTimezone;\n  p.getTimezoneAbbr = getTimezoneAbbr;\n  return exports;\n}\n\n/**\n * The initial timezone of the process. This env var may initially be undefined,\n * in which case node-time will attempt to resolve and set the variable.\n */\n\nexports.currentTimezone = process.env.TZ;\n\n/**\n * Export the raw functions from the bindings.\n */\n\nexports.time = bindings.time;\nexports.localtime = bindings.localtime;\nexports.mktime = bindings.mktime;\n\n/**\n * A \"hack\" of sorts to force getting our own Date instance.\n * Otherwise, in normal cases, the global Natives are shared between\n * contexts (not what we want)...\n */\n\nvar _Date = process.env.NODE_MODULE_CONTEXTS\n  ? Date\n  : require('vm').runInNewContext(\"Date\");\n\n/**\n * Add the node-time extensions (setTimezone(), etc.)\n */\n\nexports(_Date);\n\n/**\n * During startup, we synchronously attempt to determine the location of the\n * timezone dir, or TZDIR on some systems. This isn't necessary for the\n * C bindings, however it's needed for the `listTimezones()` function and for\n * resolving the 'initial' timezone to use.\n */\n\ndebug('attempting to resolve timezone directory.');\nvar possibleTzdirs = [\n    '/usr/share/zoneinfo'\n  , '/usr/lib/zoneinfo'\n  , '/usr/share/lib/zoneinfo'\n];\nvar TZDIR = process.env.TZDIR;\nif (TZDIR) {\n  debug('got env-defined TZDIR:', TZDIR);\n  possibleTzdirs.unshift(TZDIR);\n}\nwhile (possibleTzdirs.length > 0) {\n  var d = possibleTzdirs.shift();\n  debug('checking if directory exists:', d);\n  try {\n    if (fs.statSync(d).isDirectory()) {\n      TZDIR = d;\n      break;\n    }\n  } catch (e) {\n    debug(e);\n  }\n}\npossibleTzdirs = null; // garbage collect\nif (TZDIR) {\n  debug('found timezone directory at:', TZDIR);\n} else {\n  debug('WARN: Could not find timezone directory. listTimezones() won\\'t work');\n}\n\n/**\n * Older versions of node-time would require the user to have the TZ\n * environment variable set, otherwise undesirable results would happen. Now\n * node-time tries to automatically determine the current timezone for you.\n */\n\nif (!exports.currentTimezone) {\n  debug('`process.env.TZ` not initially set, attempting to resolve');\n  try {\n    var currentTimezonePath = fs.readlinkSync('/etc/localtime');\n    if (currentTimezonePath.substring(0, TZDIR.length) === TZDIR) {\n      // Got It!\n      var zone = currentTimezonePath.substring(TZDIR.length + 1);\n      exports.currentTimezone = process.env.TZ = zone;\n      debug('resolved initial timezone:', zone);\n    }\n  } catch (e) {\n    debug(e);\n  }\n}\n\nif (!exports.currentTimezone) {\n  debug('\"currentTimezone\" still not set. Checking \"/etc/timezone\"');\n  try {\n    var zone = fs.readFileSync('/etc/timezone', 'utf8').trim();\n    exports.currentTimezone = process.env.TZ = zone;\n    debug('resolved initial timezone:', zone);\n  } catch (e) {\n    debug(e);\n  }\n}\n\n/**\n * The user-facing 'tzset' function is a thin wrapper around the native binding to\n * 'tzset()'. This function accepts a timezone String to set the process' timezone\n * to. Returns an object with the zoneinfo for the timezone.\n *\n * Throws (on *some* platforms) when the desired timezone could not be loaded.\n *\n * Sets the `currentTimezone` property on the exports.\n */\n\nfunction tzset (tz) {\n  if (tz) {\n    process.env.TZ = tz;\n  }\n  var usedTz = process.env.TZ;\n  var rtn = bindings.tzset();\n  debug('set the current timezone to:', usedTz);\n  if (!rtn.tzname[1] && rtn.timezone === 0) {\n    debug('got bad zoneinfo object:', rtn);\n    var err = new Error(\"Unknown Timezone: '\" + usedTz + \"'\");\n    for (var i in rtn) {\n      err[i] = rtn[i];\n    }\n    throw err;\n  }\n  exports.currentTimezone = usedTz;\n  exports._currentZoneinfo = rtn;\n  return rtn;\n}\nexports.tzset = tzset;\n\n/**\n * Lists the timezones that the current system can accept. It does this by going\n * on a recursive walk through the timezone dir and collecting filenames.\n */\n\nfunction listTimezones () {\n  if (arguments.length == 0) {\n    throw new Error(\"You must set a callback\");\n  }\n  if (typeof arguments[arguments.length - 1] != \"function\") {\n    throw new Error(\"You must set a callback\");\n  }\n  var cb = arguments[arguments.length - 1]\n    , subset = (arguments.length > 1 ? arguments[0] : null)\n\n  return listTimezonesFolder(subset ? subset + \"/\" : \"\", subset ? path.join(TZDIR, \"/\" + subset) : TZDIR, function (err, tzs) {\n    if (err) return cb(err);\n    cb(null, tzs.sort());\n  });\n}\nexports.listTimezones = listTimezones;\n\nfunction listTimezonesFolder(prefix, folder, cb) {\n  var timezones = [];\n\n  fs.readdir(folder, function (err, files) {\n    if (err) return cb(err);\n\n    var pending_stats = files.length;\n\n    for (var i = 0; i < files.length; i++) {\n      if (~TZ_BLACKLIST.indexOf(files[i])\n          || files[i].indexOf(\".\") >= 0\n          || files[i][0].toUpperCase() != files[i][0]) {\n        pending_stats--;\n        continue\n      }\n      fs.stat(path.join(folder, files[i]), (function (file) {\n          return function (err, stats) {\n            if (!err) {\n              if (stats.isDirectory()) {\n                listTimezonesFolder(prefix + file + \"/\", path.join(folder, file), function (err, tzs) {\n                  if (!err) {\n                    timezones = timezones.concat(tzs);\n                  }\n                  pending_stats--;\n                  if (pending_stats == 0) cb(null, timezones);\n                });\n                return;\n              }\n              if (prefix.length > 0) timezones.push(prefix + file);\n            }\n            pending_stats--;\n            if (pending_stats == 0) cb(null, timezones);\n          };\n        })(files[i]));\n    }\n  });\n}\n\n/**\n * The \"setTimezone\" function is the \"entry point\" for a Date instance.\n * It must be called after an instance has been created. After, the 'getSeconds()',\n * 'getHours()', 'getDays()', etc. functions will return values relative\n * to the time zone specified.\n */\n\nfunction setTimezone (timezone, relative) {\n  debug('Date#setTimezone(%s, %s)', timezone, relative);\n\n  // If `true` is passed in as the second argument, then the Date instance\n  // will have it's timezone set, but it's current local values will remain\n  // the same (i.e. the Date's internal time value will be changed)\n  var ms, s, m, h, d, mo, y\n  if (relative) {\n    y  = this.getFullYear()\n    mo = this.getMonth()\n    d  = this.getDate()\n    h  = this.getHours()\n    m  = this.getMinutes()\n    s  = this.getSeconds()\n    ms = this.getMilliseconds()\n  }\n\n  // If the current process timezone doesn't match the desired timezone, then call\n  // tzset() to change the current timezone of the process.\n  var oldTz = exports.currentTimezone\n    , tz = exports._currentZoneinfo;\n  if (!tz || oldTz !== timezone) {\n    debug('current timezone is not \"%s\", calling tzset()', timezone);\n    tz = exports.tzset(timezone);\n  }\n\n  // Get the zoneinfo for this Date instance's time value\n  var zoneInfo = exports.localtime(this.getTime() / 1000);\n\n  // Change the timezone back if we changed it originally\n  if (oldTz != timezone) {\n    debug('setting timezone back to \"%s\"', oldTz);\n    exports.tzset(oldTz);\n  }\n  oldTz = null;\n\n  // If we got to here without throwing an Error, then\n  // a valid timezone was requested, and we should have\n  // a valid zoneInfo Object.\n  this.getTimezone = function getTimezone() {\n    return timezone;\n  }\n\n  // Returns the day of the month (1-31) for the specified date according to local time.\n  this.getDate = function getDate() {\n    return zoneInfo.dayOfMonth;\n  }\n  // Returns the day of the week (0-6) for the specified date according to local time.\n  this.getDay = function getDay() {\n    return zoneInfo.dayOfWeek;\n  }\n  // Deprecated. Returns the year (usually 2-3 digits) in the specified date according\n  // to local time. Use `getFullYear()` instead.\n  this.getYear = function getYear() {\n    return zoneInfo.year;\n  }\n  // Returns the year (4 digits for 4-digit years) of the specified date according to local time.\n  this.getFullYear = function getFullYear() {\n    return zoneInfo.year + 1900;\n  }\n  // Returns the hour (0-23) in the specified date according to local time.\n  this.getHours = function getHours() {\n    return zoneInfo.hours;\n  }\n  // Returns the minutes (0-59) in the specified date according to local time.\n  this.getMinutes = function getMinutes() {\n    return zoneInfo.minutes;\n  }\n  // Returns the month (0-11) in the specified date according to local time.\n  this.getMonth = function getMonth() {\n    return zoneInfo.month;\n  }\n  // Returns the seconds (0-59) in the specified date according to local time.\n  this.getSeconds = function getSeconds() {\n    return zoneInfo.seconds;\n  }\n  // Returns the timezone offset from GMT the Date instance currently is in,\n  // in minutes. Also, left of GMT is positive, right of GMT is negative.\n  this.getTimezoneOffset = function getTimezoneOffset() {\n    return -zoneInfo.gmtOffset / 60;\n  }\n  // NON-STANDARD: Returns the abbreviation (e.g. EST, EDT) for the specified time zone.\n  this.getTimezoneAbbr = function getTimezoneAbbr() {\n    return tz.tzname[zoneInfo.isDaylightSavings ? 1 : 0];\n  }\n\n  // Sets day, month and year at once\n  this.setAllDateFields = function setAllDateFields(y,mo,d) {\n    return this.setFullYear(y,mo,d);\n  }\n  // Sets the day of the month (from 1-31) in the current timezone\n  this.setDate = function setDate(d) {\n    zoneInfo.dayOfMonth = d;\n    return mktime.call(this);\n  }\n  // Sets the year (four digits) in the current timezone\n  this.setFullYear = function setFullYear(y,mo,d) {\n    zoneInfo.year = y - 1900;\n    if(arguments.length > 1)\n      zoneInfo.month = mo;\n    if(arguments.length > 2)\n      zoneInfo.dayOfMonth = d;\n    return mktime.call(this);\n  }\n  // Sets the hour (from 0-23) in the current timezone\n  this.setHours = function setHours(h,m,s,ms) {\n    zoneInfo.hours = h;\n    if(arguments.length > 1)\n      zoneInfo.minutes = m;\n    if(arguments.length > 2)\n      zoneInfo.seconds = s;\n    if(arguments.length > 3) {\n      mktime.call(this);\n      var diff = ms - this.getMilliseconds();\n      return this.setTime(this.getTime() + diff);\n    } else\n      return mktime.call(this);\n  }\n  // Sets the milliseconds (from 0-999) in the current timezone\n  this.setMilliseconds = function setMilliseconds(ms) {\n    var diff = ms - this.getMilliseconds();\n    return this.setTime(this.getTime() + diff);\n  }\n  // Set the minutes (from 0-59) in the current timezone\n  this.setMinutes = function setMinutes(m,s,ms) {\n    zoneInfo.minutes = m;\n    if(arguments.length > 1)\n      zoneInfo.seconds = s;\n    if(arguments.length > 2) {\n      mktime.call(this);\n      var diff = ms - this.getMilliseconds();\n      return this.setTime(this.getTime() + diff);\n    } else\n      return mktime.call(this);\n  }\n  // Sets the month (from 0-11) in the current timezone\n  this.setMonth = function setMonth(mo,d) {\n    zoneInfo.month = mo;\n    if(arguments.length > 1)\n      zoneInfo.dayOfMonth = d;\n    return mktime.call(this);\n  }\n  // Sets the seconds (from 0-59) in the current timezone\n  this.setSeconds = function setSeconds(s,ms) {\n    zoneInfo.seconds = s;\n    if(arguments.length > 1) {\n      mktime.call(this);\n      var diff = ms - this.getMilliseconds();\n      return this.setTime(this.getTime() + diff);\n    } else\n      return mktime.call(this);\n  }\n  // Sets a date and time by adding or subtracting a specified number of\n  // milliseconds to/from midnight January 1, 1970.\n  this.setTime = function setTime(v) {\n    var rtn = _Date.prototype.setTime.call(this, v);\n    // Since this function changes the internal UTC epoch date value, we need to\n    // re-setup these timezone translation functions to reflect the new value\n    reset.call(this);\n    return rtn;\n  }\n  // Sets the day of the month, according to universal time (from 1-31)\n  this.setUTCDate = function setUTCDate(d) {\n    var rtn = _Date.prototype.setUTCDate.call(this, d);\n    reset.call(this);\n    return rtn;\n  }\n  // Sets the year, according to universal time (four digits)\n  this.setUTCFullYear = function setUTCFullYear(y,mo,d) {\n    var rtn;\n    switch(arguments.length) {\n      case 1:\n        rtn = _Date.prototype.setUTCFullYear.call(this, y); break;\n      case 2:\n        rtn = _Date.prototype.setUTCFullYear.call(this, y,mo); break;\n      case 3:\n        rtn = _Date.prototype.setUTCFullYear.call(this, y,mo,d); break;\n    }\n    reset.call(this);\n    return rtn;\n  }\n  // Sets the hour, according to universal time (from 0-23)\n  this.setUTCHours = function setUTCHours(h,m,s,ms) {\n    var rtn;\n    switch(arguments.length) {\n      case 1:\n        rtn = _Date.prototype.setUTCHours.call(this, h); break;\n      case 2:\n        rtn = _Date.prototype.setUTCHours.call(this, h,m); break;\n      case 3:\n        rtn = _Date.prototype.setUTCHours.call(this, h,m,s); break;\n      case 4:\n        rtn = _Date.prototype.setUTCHours.call(this, h,m,s,ms); break;\n    }\n    reset.call(this);\n    return rtn;\n  }\n  // Sets the milliseconds, according to universal time (from 0-999)\n  this.setUTCMilliseconds = function setUTCMillseconds(ms) {\n    var rtn = _Date.prototype.setUTCMilliseconds.call(this, ms);\n    reset.call(this);\n    return rtn;\n  }\n  // Set the minutes, according to universal time (from 0-59)\n  this.setUTCMinutes = function setUTCMinutes(m,s,ms) {\n    var rtn;\n    switch(arguments.length) {\n      case 1:\n        rtn = _Date.prototype.setUTCMinutes.call(this, m); break;\n      case 2:\n        rtn = _Date.prototype.setUTCMinutes.call(this, m,s); break;\n      case 3:\n        rtn = _Date.prototype.setUTCMinutes.call(this, m,s,ms); break;\n    }\n    reset.call(this);\n    return rtn;\n  }\n  // Sets the month, according to universal time (from 0-11)\n  this.setUTCMonth = function setUTCMonth(mo,d) {\n    var rtn;\n    switch(arguments.length) {\n      case 1:\n        rtn = _Date.prototype.setUTCMonth.call(this, mo); break;\n      case 2:\n        rtn = _Date.prototype.setUTCMonth.call(this, mo,d); break;\n    }\n    reset.call(this);\n    return rtn;\n  }\n  // Set the seconds, according to universal time (from 0-59)\n  this.setUTCSeconds = function setUTCSeconds(s,ms) {\n    var rtn;\n    switch(arguments.length) {\n      case 1:\n        rtn = _Date.prototype.setUTCSeconds.call(this, s); break;\n      case 2:\n        rtn = _Date.prototype.setUTCSeconds.call(this, s,ms); break;\n    }\n    reset.call(this);\n    return rtn;\n  }\n\n  this.toDateString = function toDateString() {\n    return DAYS_OF_WEEK[this.getDay()].substring(0, 3) + ' ' + MONTHS[this.getMonth()].substring(0, 3) + ' ' + pad(this.getDate(), 2) + ' ' + this.getFullYear();\n  }\n\n  this.toTimeString = function toTimeString() {\n    var offset = Math.abs(zoneInfo.gmtOffset / 60); // total minutes\n    // split into HHMM:\n    var hours = pad(Math.floor(offset / 60), 2);\n    var minutes = pad(offset % 60, 2);\n    return this.toLocaleTimeString() + ' GMT' + (zoneInfo.gmtOffset >= 0 ? '+' : '-') + hours + minutes\n      + ' (' + tz.tzname[zoneInfo.isDaylightSavings ? 1 : 0] + ')';\n  }\n\n  this.toString = function toString() {\n    return this.toDateString() + ' ' + this.toTimeString();\n  }\n\n  this.toLocaleDateString = function toLocaleDateString() {\n    return DAYS_OF_WEEK[this.getDay()] + ', ' + MONTHS[this.getMonth()] + ' ' + pad(this.getDate(), 2) + ', ' + this.getFullYear();\n  }\n\n  this.toLocaleTimeString = function toLocaleTimeString() {\n    return pad(this.getHours(), 2) + ':' + pad(this.getMinutes(), 2) + ':' + pad(this.getSeconds(), 2);\n  }\n\n  this.toLocaleString = this.toString;\n\n  if (relative) {\n    this.setAllDateFields(y,mo,d)\n    this.setHours(h)\n    this.setMinutes(m)\n    this.setSeconds(s)\n    this.setMilliseconds(ms)\n    ms = s = m = h = d = mo = y = null\n  }\n\n\n  // Used internally by the 'set*' functions above...\n  function reset () {\n    this.setTimezone(this.getTimezone());\n  }\n  // 'mktime' calls 'reset' implicitly through 'setTime()'\n  function mktime () {\n    var oldTz = process.env.TZ;\n    exports.tzset(this.getTimezone());\n    zoneInfo.isDaylightSavings = -1; // Auto-detect the timezone\n    var t = exports.mktime(zoneInfo);\n    if (oldTz) {\n      exports.tzset(oldTz);\n      oldTz = null;\n    }\n    return this.setTime( (t * MILLIS_PER_SECOND) + this.getMilliseconds() );\n  }\n\n  return this;\n}\n\n// Returns a \"String\" of the last value set in \"setTimezone\".\n// TODO: Return something when 'setTimezone' hasn't been called yet.\nfunction getTimezone () {\n  throw new Error('You must call \"setTimezone(tz)\" before \"getTimezone()\" may be called');\n}\n\n// NON-STANDARD: Returns the abbreviated timezone name, also taking daylight\n// savings into consideration. Useful for the presentation layer of a Date\n// instance.\nfunction getTimezoneAbbr () {\n  var str = this.toString().match(/\\([A-Z]+\\)/)[0];\n  return str.substring(1, str.length-1);\n}\n\n// Export the modified 'Date' instance. Users should either use this with the\n// 'new' operator, or extend an already existing Date instance with 'extend()'.\n// An optional, NON-STANDARD, \"timezone\" argument may be appended as the final\n// argument, in order to specify the initial timezone the Date instance should\n// be created with.\nfunction Date (year, month, day, hour, minute, second, millisecond, timezone) {\n  if (!(this instanceof Date)) {\n    return new Date(year, month, day, hour, minute, second, millisecond, timezone).toString();\n  }\n  var argc = arguments.length\n    , d;\n  // So that we don't have to do the switch block below twice!\n  while (argc > 0 && typeof arguments[argc-1] === 'undefined') {\n    argc--;\n  }\n  // An optional 'timezone' argument may be passed as the final argument\n  if (argc >= 2 && typeof arguments[argc - 1] === 'string') {\n    timezone = arguments[argc - 1];\n    argc--;\n  }\n  // Ugly, but the native Date constructor depends on arguments.length in order\n  // to create a Date instance in the intended fashion.\n  switch (argc) {\n    case 0:\n      d = new _Date(); break;\n    case 1:\n      d = new _Date(year); break;\n    case 2:\n      d = new _Date(year, month); break;\n    case 3:\n      d = new _Date(year, month, day); break;\n    case 4:\n      d = new _Date(year, month, day, hour); break;\n    case 5:\n      d = new _Date(year, month, day, hour, minute); break;\n    case 6:\n      d = new _Date(year, month, day, hour, minute, second); break;\n    case 7:\n      d = new _Date(year, month, day, hour, minute, second, millisecond); break;\n  }\n  if (timezone) {\n    // set time given timezone relative to the currently set local time\n    // (changing the internal \"time\" milliseconds value unless ms specified)\n    d.setTimezone(timezone, !(argc == 1 && typeof year === 'number'));\n  } else {\n    d.setTimezone(exports.currentTimezone);\n  }\n  return d;\n}\nDate.prototype = _Date.prototype;\nexports.Date = Date;\n\n\n// We also overwrite `Date.parse()`. It can accept an optional 'timezone'\n// second argument.\nfunction parse (dateStr, timezone) {\n  return new Date(dateStr, timezone).getTime();\n}\nexports.parse = parse;\n\n// 'now()', 'parse()', and 'UTC()' all need to be re-defined on Date as don't enum\nObject.defineProperty(Date, 'now', { value: _Date.now, writable: true, enumerable: false });\nObject.defineProperty(Date, 'parse', { value: parse, writable: true, enumerable: false });\nObject.defineProperty(Date, 'UTC', { value: _Date.UTC, writable: true, enumerable: false });\n\n\n\n// Turns a \"regular\" Date instance into one of our \"extended\" Date instances.\n// The return value is negligible, as the original Date instance is modified.\n// DEPRECATED: Just extend the Date's prototype using the Date-extend function.\nexports.extend = function extend (date) {\n  if (!date) return date;\n  date.getTimezone = getTimezone;\n  date.setTimezone = setTimezone;\n  date.getTimezoneAbbr = getTimezoneAbbr;\n  return date;\n}\n\n\n/**\n * Pads a number with 0s if required.\n */\n\nfunction pad (num, padLen) {\n  var padding = '0000';\n  num = String(num);\n  return padding.substring(0, padLen - num.length) + num;\n}\n"}